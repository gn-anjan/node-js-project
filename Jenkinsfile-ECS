pipeline{
    agent any
    environment{
        AWS_DEFAULT_REGION = 'us-east-1'
        REACT_APP_VERSION = "1.3.$BUILD_ID"
    }
    stages{
        stage('Build'){
            agent{
                docker{
                    image "node:18-alpine"
                    reuseNode true
                }
            }
            steps{
                sh '''
                    npm install
                    npm ci
                    npm run build
                '''
            }
        }
        stage('Docker build & push'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'aws-cli', passwordVariable: 'HUB_PASSWORD', usernameVariable: 'HUB_USERNAME')]){
                    sh '''
                    echo $HUB-PASSWORD | docker login -u $HUB-USERNAME --password-stdin
                    docker build -t anjan98/node-pro:1 .
                    docker push anjan98/node-pro:1
                '''
                }
            }
        }
        stage('ECS Test'){
            agent{
                docker{
                   image "amazon/aws-cli:latest"
                    args "-u root --entrypoint=''"
                    reuseNode true 
                }
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'aws-cli', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                sh '''
                    yum install jq -y
                    LATEST_REVISION=$(aws ecs register-task-definition --cli-input-json file://aws/task-definition.json | jq '.taskDefinition.revision')
                    echo $LATEST_REVISION
                    aws ecs update-service --cluster node-project --service node-pro --task-definition node-project-new:$LATEST_REVISION
                '''
                }
            }
        
        }
    }
}