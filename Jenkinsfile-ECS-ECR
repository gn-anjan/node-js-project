pipeline{
    agent any
    environment{
        AWS_DEFAULT_REGION = 'us-east-1'
        REACT_APP_VERSION = "2.3.$BUILD_ID"
        APP_NAME = "node_pro"
        AWS_ECR = "182622655008.dkr.ecr.us-east-1.amazonaws.com"
    }
    stages{
        stage('Build'){
            agent{
                docker{
                    image "node:18-alpine"
                    reuseNode true
                }
            }
            steps{
                sh '''
                    npm install
                    npm ci
                    npm run build
                '''
            }
        }
		stage('Docker build & push'){
            agent{
                docker{
                   image "amazon/aws-cli:latest"
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                    reuseNode true 
                }
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'aws-cli', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]){
                sh '''
                    amazon-linux-extras install docker
                    docker build -t $AWS_ECR/$APP_NAME:$REACT_APP_VERSION .
                    aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR
                    docker push $AWS_ECR/$APP_NAME:$REACT_APP_VERSION
                '''
                }
            }
        }
        stage('ECS Deploy'){
            agent{
                docker{
                   image "amazon/aws-cli:latest"
                    args "-u root --entrypoint=''"
                    reuseNode true 
                }
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'aws-cli', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                sh '''
                    yum install jq -y
                    sed -i "s/#APP_VERSION#/$REACT_APP_VERSION/g" aws/task-definition.json
                    LATEST_REVISION=$(aws ecs register-task-definition --cli-input-json file://aws/task-definition.json | jq '.taskDefinition.revision')
                    echo $LATEST_REVISION
                    aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $ECS_TASK_DEFINITION:$LATEST_REVISION
                '''
                }
            }
        }
    }
}